import dedent from "dedent";

export async function POST(request: Request) {
  const { prompt, model } = await request.json();

  try {
    // Mock response since we don't have API keys in this demo environment
    const mockResponse = dedent`
      import React, { useState } from 'react';

      export default function App() {
        const [count, setCount] = useState(0);

        return (
          <div className="min-h-screen bg-gray-100 flex items-center justify-center">
            <div className="bg-white p-8 rounded-lg shadow-lg text-center">
              <h1 className="text-2xl font-bold text-gray-800 mb-4">
                Demo App: ${prompt.split('\n')[0]}
              </h1>
              <p className="text-gray-600 mb-6">
                Generated by ${model} with trash talk enabled!
              </p>
              <div className="space-y-4">
                <div className="text-xl font-semibold">
                  Count: {count}
                </div>
                <div className="space-x-4">
                  <button 
                    onClick={() => setCount(count + 1)}
                    className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
                  >
                    Increment
                  </button>
                  <button 
                    onClick={() => setCount(count - 1)}
                    className="bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600"
                  >
                    Decrement
                  </button>
                  <button 
                    onClick={() => setCount(0)}
                    className="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600"
                  >
                    Reset
                  </button>
                </div>
              </div>
            </div>
          </div>
        );
      }
    `;

    // Simulate streaming response
    const encoder = new TextEncoder();
    const readable = new ReadableStream({
      start(controller) {
        let i = 0;
        const words = mockResponse.split(' ');
        
        const sendNextWord = () => {
          if (i < words.length) {
            controller.enqueue(encoder.encode(words[i] + ' '));
            i++;
            setTimeout(sendNextWord, 50); // Simulate typing effect
          } else {
            controller.close();
          }
        };
        
        sendNextWord();
      }
    });

    return new Response(readable, {
      headers: {
        'Content-Type': 'text/plain',
        'Transfer-Encoding': 'chunked',
      },
    });
  } catch (error) {
    if (error instanceof Error) {
      return new Response(error.message, { status: 500 });
    } else {
      return new Response("Unknown error", { status: 500 });
    }
  }
}

export const runtime = "edge";
